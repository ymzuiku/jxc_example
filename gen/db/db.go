// Code generated by sqlc. DO NOT EDIT.

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.deleteAccountStmt, err = db.PrepareContext(ctx, deleteAccount); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAccount: %w", err)
	}
	if q.deleteAccountByPhoneStmt, err = db.PrepareContext(ctx, deleteAccountByPhone); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAccountByPhone: %w", err)
	}
	if q.insertAccountStmt, err = db.PrepareContext(ctx, insertAccount); err != nil {
		return nil, fmt.Errorf("error preparing query InsertAccount: %w", err)
	}
	if q.insertCompanyStmt, err = db.PrepareContext(ctx, insertCompany); err != nil {
		return nil, fmt.Errorf("error preparing query InsertCompany: %w", err)
	}
	if q.selectAccountByIdStmt, err = db.PrepareContext(ctx, selectAccountById); err != nil {
		return nil, fmt.Errorf("error preparing query SelectAccountById: %w", err)
	}
	if q.selectAccountByPhoneStmt, err = db.PrepareContext(ctx, selectAccountByPhone); err != nil {
		return nil, fmt.Errorf("error preparing query SelectAccountByPhone: %w", err)
	}
	if q.selectCompanyStmt, err = db.PrepareContext(ctx, selectCompany); err != nil {
		return nil, fmt.Errorf("error preparing query SelectCompany: %w", err)
	}
	if q.updateAccountPasswordStmt, err = db.PrepareContext(ctx, updateAccountPassword); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAccountPassword: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.deleteAccountStmt != nil {
		if cerr := q.deleteAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAccountStmt: %w", cerr)
		}
	}
	if q.deleteAccountByPhoneStmt != nil {
		if cerr := q.deleteAccountByPhoneStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAccountByPhoneStmt: %w", cerr)
		}
	}
	if q.insertAccountStmt != nil {
		if cerr := q.insertAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertAccountStmt: %w", cerr)
		}
	}
	if q.insertCompanyStmt != nil {
		if cerr := q.insertCompanyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertCompanyStmt: %w", cerr)
		}
	}
	if q.selectAccountByIdStmt != nil {
		if cerr := q.selectAccountByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing selectAccountByIdStmt: %w", cerr)
		}
	}
	if q.selectAccountByPhoneStmt != nil {
		if cerr := q.selectAccountByPhoneStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing selectAccountByPhoneStmt: %w", cerr)
		}
	}
	if q.selectCompanyStmt != nil {
		if cerr := q.selectCompanyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing selectCompanyStmt: %w", cerr)
		}
	}
	if q.updateAccountPasswordStmt != nil {
		if cerr := q.updateAccountPasswordStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAccountPasswordStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                        DBTX
	tx                        *sql.Tx
	deleteAccountStmt         *sql.Stmt
	deleteAccountByPhoneStmt  *sql.Stmt
	insertAccountStmt         *sql.Stmt
	insertCompanyStmt         *sql.Stmt
	selectAccountByIdStmt     *sql.Stmt
	selectAccountByPhoneStmt  *sql.Stmt
	selectCompanyStmt         *sql.Stmt
	updateAccountPasswordStmt *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                        tx,
		tx:                        tx,
		deleteAccountStmt:         q.deleteAccountStmt,
		deleteAccountByPhoneStmt:  q.deleteAccountByPhoneStmt,
		insertAccountStmt:         q.insertAccountStmt,
		insertCompanyStmt:         q.insertCompanyStmt,
		selectAccountByIdStmt:     q.selectAccountByIdStmt,
		selectAccountByPhoneStmt:  q.selectAccountByPhoneStmt,
		selectCompanyStmt:         q.selectCompanyStmt,
		updateAccountPasswordStmt: q.updateAccountPasswordStmt,
	}
}
