// Code generated by sqlc. DO NOT EDIT.
// source: company.sql

package db

import (
	"context"
)

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM company WHERE account_id = $1 AND name = $2
`

type DeleteAccountParams struct {
	AccountID int32  `json:"accountID"`
	Name      string `json:"name"`
}

func (q *Queries) DeleteAccount(ctx context.Context, arg DeleteAccountParams) error {
	_, err := q.exec(ctx, q.deleteAccountStmt, deleteAccount, arg.AccountID, arg.Name)
	return err
}

const insertCompany = `-- name: InsertCompany :one
INSERT INTO company (
  account_id,
  name,
  people
) VALUES ($1, $2, $3) RETURNING id, account_id, name, people, created_at, update_at
`

type InsertCompanyParams struct {
	AccountID int32  `json:"accountID"`
	Name      string `json:"name"`
	People    string `json:"people"`
}

func (q *Queries) InsertCompany(ctx context.Context, arg InsertCompanyParams) (Company, error) {
	row := q.queryRow(ctx, q.insertCompanyStmt, insertCompany, arg.AccountID, arg.Name, arg.People)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Name,
		&i.People,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}

const selectCompany = `-- name: SelectCompany :one
SELECT id, name FROM company WHERE account_id = $1 LIMIT 1
`

type SelectCompanyRow struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) SelectCompany(ctx context.Context, accountID int32) (SelectCompanyRow, error) {
	row := q.queryRow(ctx, q.selectCompanyStmt, selectCompany, accountID)
	var i SelectCompanyRow
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
