// Code generated by sqlc. DO NOT EDIT.
// source: account.sql

package db

import (
	"context"
)

const deleteAccountByPhone = `-- name: DeleteAccountByPhone :exec
DELETE FROM account WHERE phone = $1
`

func (q *Queries) DeleteAccountByPhone(ctx context.Context, phone string) error {
	_, err := q.exec(ctx, q.deleteAccountByPhoneStmt, deleteAccountByPhone, phone)
	return err
}

const insertAccount = `-- name: InsertAccount :exec
INSERT INTO account (
  name,
  phone,
  password
) VALUES ($1, $2, $3) RETURNING id, name, phone, password, created_at, update_at
`

type InsertAccountParams struct {
	Name     string `json:"name"`
	Phone    string `json:"phone"`
	Password string `json:"password"`
}

func (q *Queries) InsertAccount(ctx context.Context, arg InsertAccountParams) error {
	_, err := q.exec(ctx, q.insertAccountStmt, insertAccount, arg.Name, arg.Phone, arg.Password)
	return err
}

const selectAccountById = `-- name: SelectAccountById :one
SELECT id, name, phone, password, created_at, update_at FROM account WHERE id = $1
`

func (q *Queries) SelectAccountById(ctx context.Context, id int32) (Account, error) {
	row := q.queryRow(ctx, q.selectAccountByIdStmt, selectAccountById, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phone,
		&i.Password,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}

const selectAccountByPhone = `-- name: SelectAccountByPhone :one
SELECT id, name, phone, password, created_at, update_at FROM account WHERE phone = $1 LIMIT 1
`

func (q *Queries) SelectAccountByPhone(ctx context.Context, phone string) (Account, error) {
	row := q.queryRow(ctx, q.selectAccountByPhoneStmt, selectAccountByPhone, phone)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phone,
		&i.Password,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}

const updateAccountPassword = `-- name: UpdateAccountPassword :exec
UPDATE account SET password = $2 WHERE id = $1
`

type UpdateAccountPasswordParams struct {
	ID       int32  `json:"id"`
	Password string `json:"password"`
}

func (q *Queries) UpdateAccountPassword(ctx context.Context, arg UpdateAccountPasswordParams) error {
	_, err := q.exec(ctx, q.updateAccountPasswordStmt, updateAccountPassword, arg.ID, arg.Password)
	return err
}
