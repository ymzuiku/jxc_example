// Code generated by sqlc. DO NOT EDIT.
// source: users.sql

package db

import (
	"context"
)

const deleteUserByPhone = `-- name: DeleteUserByPhone :exec
DELETE FROM users WHERE phone = $1
`

func (q *Queries) DeleteUserByPhone(ctx context.Context, phone string) error {
	_, err := q.exec(ctx, q.deleteUserByPhoneStmt, deleteUserByPhone, phone)
	return err
}

const insertUser = `-- name: InsertUser :exec
INSERT INTO users (
  name,
  phone,
  password
) VALUES ($1, $2, $3) RETURNING id, name, phone, password, created_at, update_at
`

type InsertUserParams struct {
	Name     string `json:"name"`
	Phone    string `json:"phone"`
	Password string `json:"password"`
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) error {
	_, err := q.exec(ctx, q.insertUserStmt, insertUser, arg.Name, arg.Phone, arg.Password)
	return err
}

const selectUserById = `-- name: SelectUserById :one
SELECT id, name, phone, password, created_at, update_at FROM users WHERE id = $1 LIMIT 1
`

func (q *Queries) SelectUserById(ctx context.Context, id int64) (User, error) {
	row := q.queryRow(ctx, q.selectUserByIdStmt, selectUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phone,
		&i.Password,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}

const selectUserByPhone = `-- name: SelectUserByPhone :one
SELECT id, name, phone, password, created_at, update_at FROM users WHERE phone = $1 LIMIT 1
`

func (q *Queries) SelectUserByPhone(ctx context.Context, phone string) (User, error) {
	row := q.queryRow(ctx, q.selectUserByPhoneStmt, selectUserByPhone, phone)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phone,
		&i.Password,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users SET password = $2 WHERE id = $1
`

type UpdateUserPasswordParams struct {
	ID       int64  `json:"id"`
	Password string `json:"password"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.exec(ctx, q.updateUserPasswordStmt, updateUserPassword, arg.ID, arg.Password)
	return err
}
