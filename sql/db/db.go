// Code generated by sqlc. DO NOT EDIT.

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.deleteUserByPhoneStmt, err = db.PrepareContext(ctx, deleteUserByPhone); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUserByPhone: %w", err)
	}
	if q.insertUserStmt, err = db.PrepareContext(ctx, insertUser); err != nil {
		return nil, fmt.Errorf("error preparing query InsertUser: %w", err)
	}
	if q.selectUserByIdStmt, err = db.PrepareContext(ctx, selectUserById); err != nil {
		return nil, fmt.Errorf("error preparing query SelectUserById: %w", err)
	}
	if q.selectUserByPhoneStmt, err = db.PrepareContext(ctx, selectUserByPhone); err != nil {
		return nil, fmt.Errorf("error preparing query SelectUserByPhone: %w", err)
	}
	if q.updateUserPasswordStmt, err = db.PrepareContext(ctx, updateUserPassword); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserPassword: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.deleteUserByPhoneStmt != nil {
		if cerr := q.deleteUserByPhoneStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserByPhoneStmt: %w", cerr)
		}
	}
	if q.insertUserStmt != nil {
		if cerr := q.insertUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertUserStmt: %w", cerr)
		}
	}
	if q.selectUserByIdStmt != nil {
		if cerr := q.selectUserByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing selectUserByIdStmt: %w", cerr)
		}
	}
	if q.selectUserByPhoneStmt != nil {
		if cerr := q.selectUserByPhoneStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing selectUserByPhoneStmt: %w", cerr)
		}
	}
	if q.updateUserPasswordStmt != nil {
		if cerr := q.updateUserPasswordStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserPasswordStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                     DBTX
	tx                     *sql.Tx
	deleteUserByPhoneStmt  *sql.Stmt
	insertUserStmt         *sql.Stmt
	selectUserByIdStmt     *sql.Stmt
	selectUserByPhoneStmt  *sql.Stmt
	updateUserPasswordStmt *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                     tx,
		tx:                     tx,
		deleteUserByPhoneStmt:  q.deleteUserByPhoneStmt,
		insertUserStmt:         q.insertUserStmt,
		selectUserByIdStmt:     q.selectUserByIdStmt,
		selectUserByPhoneStmt:  q.selectUserByPhoneStmt,
		updateUserPasswordStmt: q.updateUserPasswordStmt,
	}
}
